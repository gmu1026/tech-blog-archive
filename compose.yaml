version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:16-alpine
    container_name: tech-blog-archive-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - tech-blog-network

  # Redis 캐싱 및 Pub/Sub
  redis:
    image: redis:7-alpine
    container_name: tech-blog-archive-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis-data:/data
    networks:
      - tech-blog-network

  # Elasticsearch 검색엔진
  elasticsearch:
    image: elasticsearch:8.12.0
    container_name: tech-blog-archive-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - tech-blog-network

  # Kibana (Elasticsearch 관리 도구)
  kibana:
    image: kibana:8.12.0
    container_name: tech-blog-archive-kibana
    restart: unless-stopped
    depends_on:
      - elasticsearch
    ports:
      - "${KIBANA_PORT}:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - tech-blog-network

  # Kafka 이벤트 브로커
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: tech-blog-archive-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - tech-blog-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: tech-blog-archive-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - tech-blog-network

  # 애플리케이션 백엔드 (개발 중이므로 주석 처리)
  # app:
  #   build: .
  #   container_name: tech-blog-archive-app
  #   restart: unless-stopped
  #   depends_on:
  #     - postgres
  #     - redis
  #     - elasticsearch
  #     - kafka
  #   ports:
  #     - "${APP_PORT}:8080"
  #   environment:
  #     SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
  #     SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
  #     SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
  #     SPRING_REDIS_HOST: redis
  #     SPRING_REDIS_PORT: 6379
  #     SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
  #     SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  #   networks:
  #     - tech-blog-network

networks:
  tech-blog-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  elasticsearch-data: